/* 
 // require the animation on the box, not the contents
 // Does rbox try to guess what type of element it is?
 // data attrs all broken, e.g. data attr for closeonoverlay not working
 // custom close class needs to be deactivated
 // closeonoverlay, closebtn broken if I ADD TO OPTION TYPES
 // instead of fitvids, can we have js for iframe width: 100vw,
 height: padding-bottom vw; http://stackoverflow.com/questions/25302836/responsive-video-iframes-keeping-aspect-ratio-with-only-css, doesn't seem to work if you need to constrain the parent width
 // autoplay only works via data attr for video, not inside JS ??? fix demo accorindgly
// Unable to replicate loading?
// arrays for custom navmarkup defaults
// create arrays for custom classes for nav
// Video type shows error in console when playing bunny video: Uncaught TypeError: Cannot read property 'pause' of undefined;
// why data height or height is showing smaller than height i'm defining for video?
// data height and widths for video and iframes broken? or only height? update demos accorindingly. iframe is not getting height only properly
// is it a problem to have defaults for next prev close declared in markup as well as opts inside js?
// why rbox-examples anchor not working?
// replace bind with on method
// Namespace
// opt: throttle window resize;
// Instead of allowing user to customize nav markup via js, why not just allow him to add a parent per instance and change the content after link for that?
*/

* {
	box-sizing: border-box; 
}

.rbox_overlay {
	text-align: center;
  background: #000;
  background: rgba(0, 0, 0, 0.8);
	opacity: 0;
  width: 100%;
  height: 100%;
	display: flex;
	align-items: center;
  position: fixed;
  left: 0;
  top: 0;
	bottom: 0;
	right: 0;
	z-index: -1;
}

.rbox_overlay_short {
	align-items: flex-start; /* for when rbox content is taller than viewport */
	position: absolute;
}

.rbox_show {
	opacity: 1;
  z-index: 10000;
	transition: all 0.2s ease-in-out;
}

.rbox_lightBoxBlock {
	margin: 25px auto;
	max-width: 80%;
  position: relative;
	display: inline-block;
}

.rbox_lightBox {
  padding: 10px;
  position: relative;
}

.nextLightBox, .prevLightBox, .closeLightBox {
	color: #777;
	text-decoration: none;
}

.nextLightBox, .prevLightBox, .closeLightBox {
	text-decoration: none;
	padding: 10px;
}

/*.closeLightBox:after {
	content: "\274c";
}

.nextLightBox:after {
	content: "\25b6";
}

.prevLightBox:after {
	content: "\25c0";
}*/

.closeLightBox {
	position: absolute;
	right: -14px;
	top:-26px;
	font-size: 20px;
}

.nextLightBox, .prevLightBox {
	position: absolute;
	top: 44%;
	font-size: 20px;
}

.nextLightBox {
	right: -30px;	
}

.prevLightBox {
	left: -30px;	
}

/* .rbox_lightBoxContent {
	display: inline-block;
}
 */

.rbox_lightBoxContent iframe {
	max-width: 100%;
	width: 100vw;
	height: 70vh;
}

.rbox_lightBoxContent img, .rbox_lightBoxContent video {
	display: block;
	margin: 0 auto;
  max-width: 100%; /* Remove if included in your site's global styles */
  height: auto; /* Remove if included in your site's global styles */
}

.rbox_lightBoxContent iframe {
	border: 0; /* Remove if included in your site's global styles */
}

.rbox_inline, .rbox_html {
	background: #fff;
	padding: 20px;
}

.rbox_show_content {
	animation: rotate 500ms ease-in 0ms forwards;
}

.rbox_caption {
	color: #fff;
}

@keyframes rotate {
	100% {
		transform: rotate(360deg);
	}
}